#!/usr/bin/env python
from __future__ import print_function

import os
import re
import yaml

Import("env merge_yaml")

sections = (
        ("Publications",
            {"level" : 2,},
        ),
        ("Journal articles",
            {"level" : 3,
             "publication-keys" : [{"type" : "article-journal"}]},
        ),
        ("Conference papers",
            {"level" : 3,
             "publication-keys" : [{"type" : "paper-conference"}]}
        ),
        ("Reports",
            {"level" : 3,
             "publication-keys" : [{"type" : "report"}]},
        ),
        ("Thesis",
            {"level" : 3,
             "publication-keys" : [{"type" : "thesis"}]},
        ),
        ("Presentations",
            {"level" : 3,
             "publication-keys" : [{"type" : "speech",
                                    "genre" : ""}]},
        ),
        ("Posters",
            {"level" : 3,
             "publication-keys" : [{"type" : "speech",
                                    "genre" : "Poster"}]},
        ),
    )

pubs = [
        "alston_realistic_2020.yaml",
        "alston_realistic_2022.yaml",
        "bertrand_infrared_2020.yaml",
        "burdette_imaging_2013.yaml",
        "cathcart_human_2011.yaml",
        "cathcart_model_2011.yaml",
        "cathcart_multimodal_2010.yaml",
        "hope_dynamic_2021.yaml",
        "prussing_calibration_2017.yaml",
        "prussing_combined_2018.yaml",
        "prussing_enhanced_2018.yaml",
        "prussing_estimation_2020.yaml",
        "prussing_general_2022.yaml",
        "prussing_human_2011.yaml",
        "prussing_investigation_2015.yaml",
        "prussing_night_2019.yaml",
        "prussing_numerical_2013.yaml",
        "prussing_numerical_2014.yaml",
        "prussing_object_2019.yaml",
        "prussing_recent_2020.yaml",
        "prussing_stellar_2019.yaml",
        "prussing_terrain_2017.yaml",
        "prussing_urban_2010.yaml",
        "prussing_verification_2019.yaml",
        "renegar_design_2020.yaml",
        "stewart_gtsims_2016.yaml",
        "zacharias_positional_2019.yaml",
    ]

action="python3 ${SOURCES[0]} -l references -o ${TARGET} ${SOURCES[1:]}"
bib = env.Command("publications.yaml", [merge_yaml] + pubs, action=action)

def missed(target, source, env):
    """Generate the list of missed papers

    In an ideal world, this is empty.  However, I may not have updated
    the mappings after an update to the format or adding a new
    publication.

    """
    with open(source[0].path, "r") as src:
        doc = yaml.safe_load(src)

    try:
        bib = doc["references"]
    except KeyError:
        import sys
        msg = "{0} is missing the 'references' block"
        print(msg.format(target[0].path), file=sys.stdout)
        raise

    for keys in [x[1].get("publication-keys", []) for x in sections]:
        if not keys:
            continue

        for item in reversed(bib):
            if all([item.get(k, "") == v
                    for x in keys
                    for k, v in x.items()]):
                bib.remove(item)

    with open(target[0].path, "w") as tgt:
        if bib:
            doc["references"] = bib
            tgt.write("---\nnocite: '@*'\n")
            yaml.dump(doc, stream=tgt, default_flow_style=False)
            tgt.write("...\n")
            head = "{0} {1}\n".format("#" * env.get("level", 3),
                                      env.get("section", "Unsorted"))
            tgt.write(head)

def header(target, source, env):
    """Generate a section header"""
    key = "publication-keys"
    block = env.get(key, {})
    with open(target[0].path, "w") as tgt:
        if block:
            tgt.write("---\nnocite: '@*'\n")
            yaml.dump({key : block}, stream=tgt,
                      default_flow_style=False)
            tgt.write("...\n")

        head = "{0} {1}\n".format("#" * env.get("level", 1),
                                  env.get("section", "Publications"))
        tgt.write(head)

secs = []
flags = ["--from", "markdown",
         "--filter", File("publications.py").path,
         "--citeproc",
         "--csl", File("ieee-with-url.csl").path
         ]
for section, kwargs in sections:
    root = re.sub(r"\s", "-", section)
    md = env.Command(root + ".md", None,
                     header, section=section, **kwargs)
    secs.extend(env.Pandoc(root + ".html", md + [bib],
                           PANDOCFLAGS=" ".join(flags)))

unsorted = env.Command("unsorted.md", bib, missed)
secs.extend(env.Pandoc("unsorted.html", unsorted,
                       level=3, PANDOCFLAGS=" ".join(flags[2:])))

html = env.Pandoc("index.html", secs, PANDOCFLAGS="")
Return("html")
